{"version":3,"sources":["components/Header/Header.js","components/EmployeesTable/EmployeesTable.js","components/SearchBar/SearchBar.js","components/Footer/Footer.js","utils/api.js","utils/util.js","components/Employees/Employees.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","EmployeesTable","props","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","TableSortLabel","active","orderBy","direction","order","onClick","handleSort","TableBody","employees","map","emp","hover","alt","firstName","lastName","src","image","email","phone","id","SearchBar","TextField","color","variant","label","type","width","name","onChange","handleInputChange","Footer","class","href","target","api","getEmployees","axios","get","util","value","employeeArray","filter","employee","toLowerCase","includes","key","a","b","optionA","toUpperCase","optionB","comparison","Employees","state","loadedEmployees","search","event","setState","queriedEmployees","col","sortedList","sort","newList","then","response","employeeData","data","results","picture","medium","first","last","console","log","catch","err","Grid","container","justify","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.796cd3c2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./header.css\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"jumbotron text-center\">\r\n            <h1>React Employee Directory</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport \"./style.css\";\r\n\r\nfunction EmployeesTable(props) {\r\n    return (\r\n        <TableContainer className=\"table-style\">\r\n            <Table stickyHeader aria-label=\"Employee Table\">\r\n\r\n                {/* Table header with titles for employees info */}\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\">IMAGE</TableCell>\r\n                        <TableCell align=\"center\">FIRST NAME\r\n                            <TableSortLabel active={props.orderBy === \"firstName\"} direction={props.order} onClick={() => props.handleSort(\"firstName\", props.order)}></TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">LAST NAME\r\n                        <TableSortLabel active={props.orderBy === \"lastName\"} direction={props.order} onClick={() => props.handleSort(\"lastName\", props.order)}></TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">EMAIL\r\n                        <TableSortLabel active={props.orderBy === \"email\"} direction={props.order} onClick={() => props.handleSort(\"email\", props.order)}></TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">PHONE NUMBER</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n\r\n                {/* Table body containing employees info */}\r\n                <TableBody>\r\n                    {\r\n                        props.employees.map(emp => {\r\n                            return <TableRow hover key={emp.id}>\r\n                                <TableCell align=\"center\"><img alt={`${emp.firstName} ${emp.lastName}`} src={emp.image}></img></TableCell>\r\n                                <TableCell align=\"center\">{emp.firstName}</TableCell>\r\n                                <TableCell align=\"center\">{emp.lastName}</TableCell>\r\n                                <TableCell align=\"center\">{emp.email}</TableCell>\r\n                                <TableCell align=\"center\">{emp.phone}</TableCell>\r\n                            </TableRow>\r\n                        })\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\nexport default EmployeesTable;","import React from \"react\";\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nfunction SearchBar(props) {\r\n    return (\r\n        <TextField color=\"secondary\" variant=\"outlined\" label=\"Search Here\" type=\"search\" width=\"200px\" name=\"search\" onChange={props.handleInputChange} />\r\n    )\r\n}\r\n\r\nexport default SearchBar;","import React from \"react\";\r\nimport \"./footer.css\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div class=\"navbar justify-content-center\">\r\n            <span class=\"navbar-brand footer-font text-color\">Copyright &copy;2020 | Ahmed Sheikh</span>\r\n            <span >\r\n                <a class=\"fab fa-github fa-lg icon-color pr-3\" href=\"https://github.com/ASheikh-io\" target=\"_blank\"></a>\r\n                <a class=\"fab fa-linkedin fa-lg icon-color pr-3\" href=\"https://www.linkedin.com/in/ahmed-sheikh-04240\"\r\n                    target=\"_blank\"></a>\r\n                <a class=\"fas fa-envelope fa-lg icon-color\" href=\"mailto:ahsheikh.a@gmail.com\" target=\"_blank\"></a>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import axios from \"axios\";\r\n\r\nconst api = {\r\n    getEmployees: () => {\r\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\")\r\n    }\r\n};\r\n\r\nexport default api","const util = {\r\n\r\n    // Check employeeArray to find item matching the search\r\n    searchEmployees: (value, employeeArray) => {\r\n        let searchedEmployees = employeeArray.filter((employee) => {\r\n            return employee.firstName.toLowerCase().includes(value.toLowerCase()) || \r\n            employee.lastName.toLowerCase().includes(value.toLowerCase()) || \r\n            employee.phone.toLowerCase().includes(value.toLowerCase())\r\n        })\r\n        return searchedEmployees;\r\n    },\r\n\r\n    // Function to compare values in array and sort \"asc\" or \"desc\"\r\n    // Cited:  https://www.sitepoint.com/sort-an-array-of-objects-in-javascript/\r\n    compareValues: (key, order = \"asc\") => {\r\n        return function compare(a, b) {\r\n            // Use toUpperCase() to ignore character casing\r\n            const optionA = a[key].toUpperCase();\r\n            const optionB = b[key].toUpperCase();\r\n\r\n            let comparison = 0;\r\n            if (optionA > optionB) {\r\n                comparison = 1;\r\n            } else if (optionA < optionB) {\r\n                comparison = -1;\r\n            }\r\n            return (\r\n                (order === \"desc\") ? (comparison * -1) : comparison\r\n            );\r\n        };\r\n    }\r\n}\r\n\r\nexport { util }","import React, { Component } from 'react';\r\nimport EmployeesTable from \"../EmployeesTable/EmployeesTable\";\r\nimport SearchBar from \"../SearchBar/SearchBar\";\r\nimport Footer from \"../Footer/Footer\"\r\nimport api  from \"../../utils/api\";\r\nimport {util} from \"../../utils/util\";\r\n// Material-ui Imports\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n\r\n\r\nclass Employees extends Component {\r\n    state= {\r\n        employees: [],\r\n        loadedEmployees: [],\r\n        search: \"\",\r\n        orderBy:\"\",\r\n        order: \"asc\"\r\n    }\r\n    \r\n    // api calls in this function (life cycle method)\r\n    componentDidMount() {\r\n        api.getEmployees().then((response) => {\r\n            let employeeData = response.data.results.map(employee => {\r\n                return {\r\n                    id: employee.id.value,\r\n                    image: employee.picture.medium,\r\n                    firstName: employee.name.first,\r\n                    lastName: employee.name.last,\r\n                    email: employee.email,\r\n                    phone: employee.phone\r\n                }\r\n            })\r\n            console.log(\"this is the\" + employeeData);\r\n            this.setState({\r\n                employees: employeeData,\r\n                loadedEmployees: employeeData\r\n            })\r\n        })\r\n        .catch(err => console.log(err));\r\n      }\r\n\r\n   // Function to allow user to search the employee directory\r\n    // Cited: https://reactjs.org/docs/forms.html\r\n    handleInputChange = event => {\r\n        let value = event.target.value;\r\n        const name = event.target.name;\r\n        // Set the state to that of the input\r\n        this.setState({\r\n            [name]: value\r\n        }, () => {\r\n            // Filter employee list\r\n            if (this.state.search) {\r\n                let queriedEmployees = util.searchEmployees(this.state.search, this.state.loadedEmployees);\r\n                this.setState({\r\n                    employees: queriedEmployees,\r\n                    orderBy: \"\"\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    employees: this.state.loadedEmployees,\r\n                    orderBy: \"\"\r\n                })\r\n            }\r\n        });\r\n    };\r\n\r\n    // Function to allow user to sort directory by each column\r\n    handleSort = (col, order) => {\r\n        let sortedList = [...this.state.employees].sort(util.compareValues(col, order));\r\n        let newList = order === \"asc\" ? \"desc\" : \"asc\"\r\n        this.setState({\r\n            employees: sortedList,\r\n            order: newList,\r\n            orderBy: col\r\n        });\r\n    }\r\n\r\n    // Render the content\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Grid className=\"search-style\" container justify=\"center\">\r\n                    <SearchBar employees={this.state.employees} handleInputChange={this.handleInputChange} />\r\n                </Grid>\r\n                <EmployeesTable employees={this.state.employees} handleSort={this.handleSort} orderBy={this.state.orderBy} order={this.state.order} />\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Employees;","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./components/Header/Header\";\r\nimport Employees from \"./components/Employees/Employees\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Employees />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}